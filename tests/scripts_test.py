#!/usr/bin/env python
from __future__ import unicode_literals

import hashlib
import io
import os.path
import shutil
import tempfile
import unittest

import cdblib

from cdblib.cdbmake import main as python_pure_cdbmake



class ScriptsTests(unittest.TestCase):
    def setUp(self):
        self.temp_dir = tempfile.mkdtemp()

    def tearDown(self):
        shutil.rmtree(self.temp_dir, ignore_errors=True)

    def test_cdbmake_known_hash(self):
        # Construct a database from text records and compare the resultant
        # file to what is generated by the official cdbmake tool
        stdin = io.BytesIO(
            b'+6,1:binary->\x81\n'
            b'+4,4:text->\xf0\x9f\x95\xb4\n'
            b'+7,6:integer->102010\n'
            b'\n'
        )
        cdb_path = os.path.join(self.temp_dir, 'out.cdb')
        tmp_path = os.path.join(self.temp_dir, 'tmp.cdb')
        args = [cdb_path, tmp_path]
        python_pure_cdbmake(args, stdin=stdin)

        with io.open(cdb_path, 'rb') as infile:
            data = infile.read()
            output_hash = hashlib.md5()
            output_hash.update(data)

        # `<out.cdb cdbdump | md5sum` produced the control
        self.assertEqual(
            output_hash.hexdigest(), 'd72501985daa56ed9e29f8af984b4810'
        )

    def test_cdbmake_64_bits(self):
        # Construct a 64-bit database with the CLI tool and read back the
        # records
        stdin = io.BytesIO(
            b'+6,1:binary->\x81\n'
            b'+4,4:text->\xf0\x9f\x95\xb4\n'
            b'+7,6:integer->102010\n'
            b'+7,3:integer->241\n'
            b'\n'
        )
        cdb_path = os.path.join(self.temp_dir, 'out_64.cdb')
        tmp_path = os.path.join(self.temp_dir, 'tmp_64.cdb')
        args = ['-8', cdb_path, tmp_path]
        python_pure_cdbmake(args, stdin=stdin)

        with io.open(cdb_path, 'rb') as infile:
            data = infile.read()
            output_hash = hashlib.md5()
            output_hash.update(data)

        # Ensure that everything can be decoded properly
        with io.open(cdb_path, 'rb') as infile:
            data = infile.read()

        reader = cdblib.Reader64(data)
        self.assertEqual(reader[b'binary'], b'\x81')
        self.assertEqual(
            reader.getstring(b'text'), u'\N{MAN IN BUSINESS SUIT LEVITATING}'
        )
        self.assertEqual(list(reader.getints(b'integer')), [102010, 241])


if __name__ == '__main__':
    unittest.main()
